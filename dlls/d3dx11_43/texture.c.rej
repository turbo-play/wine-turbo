--- dlls/d3dx11_43/texture.c
+++ dlls/d3dx11_43/texture.c
@@ -425,14 +621,155 @@ HRESULT WINAPI D3DX11CreateTextureFromFileW(ID3D11Device *device, const WCHAR *f
     return E_NOTIMPL;
 }
 
-HRESULT WINAPI D3DX11CreateTextureFromMemory(ID3D11Device *device, const void *data,
-        SIZE_T data_size, D3DX11_IMAGE_LOAD_INFO *load_info, ID3DX11ThreadPump *pump,
+HRESULT WINAPI D3DX11CreateTextureFromMemory(ID3D11Device *device, const void *src_data,
+        SIZE_T src_data_size, D3DX11_IMAGE_LOAD_INFO *load_info, ID3DX11ThreadPump *pump,
         ID3D11Resource **texture, HRESULT *hresult)
 {
-    FIXME("device %p, data %p, data_size %Iu, load_info %p, pump %p, texture %p, hresult %p stub.\n",
-            device, data, data_size, load_info, pump, texture, hresult);
+    unsigned int frame_count, width, height, stride, frame_size;
+    IWICFormatConverter *converter = NULL;
+    IWICDdsFrameDecode *dds_frame = NULL;
+    D3D11_TEXTURE2D_DESC texture_2d_desc;
+    D3D11_SUBRESOURCE_DATA resource_data;
+    IWICBitmapFrameDecode *frame = NULL;
+    IWICImagingFactory *factory = NULL;
+    IWICBitmapDecoder *decoder = NULL;
+    ID3D11Texture2D *texture_2d;
+    D3DX11_IMAGE_INFO img_info;
+    IWICStream *stream = NULL;
+    const GUID *dst_format;
+    BYTE *buffer = NULL;
+    BOOL can_convert;
+    GUID src_format;
+    HRESULT hr;
 
-    return E_NOTIMPL;
+    TRACE("device %p, data %p, data_size %Iu, load_info %p, pump %p, texture %p, hresult %p.\n",
+            device, src_data, src_data_size, load_info, pump, texture, hresult);
+
+    if (!src_data || !src_data_size || !texture)
+        return E_FAIL;
+    if (load_info)
+        FIXME("load_info is ignored.\n");
+    if (pump)
+        FIXME("Thread pump is not supported yet.\n");
+
+    if (FAILED(D3DX11GetImageInfoFromMemory(src_data, src_data_size, NULL, &img_info, NULL)))
+        return E_FAIL;
+    if (img_info.MiscFlags & D3D11_RESOURCE_MISC_TEXTURECUBE)
+    {
+        FIXME("Cube map is not supported.\n");
+        return E_FAIL;
+    }
+
+    if (FAILED(hr = WICCreateImagingFactory_Proxy(WINCODEC_SDK_VERSION, &factory)))
+        goto end;
+    if (FAILED(hr = IWICImagingFactory_CreateStream(factory, &stream)))
+        goto end;
+    if (FAILED(hr = IWICStream_InitializeFromMemory(stream, (BYTE *)src_data, src_data_size)))
+        goto end;
+    if (FAILED(hr = IWICImagingFactory_CreateDecoderFromStream(factory, (IStream *)stream, NULL, 0, &decoder)))
+        goto end;
+    if (FAILED(hr = IWICBitmapDecoder_GetFrameCount(decoder, &frame_count)) || !frame_count)
+        goto end;
+    if (FAILED(hr = IWICBitmapDecoder_GetFrame(decoder, 0, &frame)))
+        goto end;
+    if (FAILED(hr = IWICBitmapFrameDecode_GetPixelFormat(frame, &src_format)))
+        goto end;
+
+    width = img_info.Width;
+    height = img_info.Height;
+    if (is_block_compressed(img_info.Format))
+    {
+        width = (width + 3) & ~3;
+        height = (height + 3) & ~3;
+    }
+    stride = (width * get_bpp_from_format(img_info.Format) + 7) / 8;
+    frame_size = stride * height;
+
+    if (!(buffer = heap_alloc(frame_size)))
+    {
+        hr = E_FAIL;
+        goto end;
+    }
+
+    if (is_block_compressed(img_info.Format))
+    {
+        if (FAILED(hr = IWICBitmapFrameDecode_QueryInterface(frame, &IID_IWICDdsFrameDecode, (void **)&dds_frame)))
+            goto end;
+        if (FAILED(hr = IWICDdsFrameDecode_CopyBlocks(dds_frame, NULL, stride * 4, frame_size, buffer)))
+            goto end;
+    }
+    else
+    {
+        if (!(dst_format = dxgi_format_to_wic_guid(img_info.Format)))
+        {
+            hr = E_FAIL;
+            FIXME("Unsupported DXGI format %#x.\n", img_info.Format);
+            goto end;
+        }
+
+        if (IsEqualGUID(&src_format, dst_format))
+        {
+            if (FAILED(hr = IWICBitmapFrameDecode_CopyPixels(frame, NULL, stride, frame_size, buffer)))
+                goto end;
+        }
+        else
+        {
+            if (FAILED(hr = IWICImagingFactory_CreateFormatConverter(factory, &converter)))
+                goto end;
+            if (FAILED(hr = IWICFormatConverter_CanConvert(converter, &src_format, dst_format, &can_convert)))
+                goto end;
+            if (!can_convert)
+            {
+                WARN("Format converting %s to %s is not supported by WIC.\n",
+                        debugstr_guid(&src_format), debugstr_guid(dst_format));
+                goto end;
+            }
+            if (FAILED(hr = IWICFormatConverter_Initialize(converter, (IWICBitmapSource *)frame, dst_format,
+                    WICBitmapDitherTypeErrorDiffusion, 0, 0, WICBitmapPaletteTypeCustom)))
+                goto end;
+            if (FAILED(hr = IWICFormatConverter_CopyPixels(converter, NULL, stride, frame_size, buffer)))
+                goto end;
+        }
+    }
+
+    memset(&texture_2d_desc, 0, sizeof(texture_2d_desc));
+    texture_2d_desc.Width = width;
+    texture_2d_desc.Height = height;
+    texture_2d_desc.MipLevels = 1;
+    texture_2d_desc.ArraySize = img_info.ArraySize;
+    texture_2d_desc.Format = img_info.Format;
+    texture_2d_desc.SampleDesc.Count = 1;
+    texture_2d_desc.Usage = D3D11_USAGE_DEFAULT;
+    texture_2d_desc.BindFlags = D3D11_BIND_SHADER_RESOURCE;
+    texture_2d_desc.MiscFlags = img_info.MiscFlags;
+
+    resource_data.pSysMem = buffer;
+    resource_data.SysMemPitch = stride;
+    resource_data.SysMemSlicePitch = frame_size;
+
+    if (FAILED(hr = ID3D11Device_CreateTexture2D(device, &texture_2d_desc, &resource_data, &texture_2d)))
+        goto end;
+
+    *texture = (ID3D11Resource *)texture_2d;
+    hr = S_OK;
+
+end:
+    if (converter)
+        IWICFormatConverter_Release(converter);
+    if (dds_frame)
+        IWICDdsFrameDecode_Release(dds_frame);
+    if (buffer)
+        heap_free(buffer);
+    if (frame)
+        IWICBitmapFrameDecode_Release(frame);
+    if (decoder)
+        IWICBitmapDecoder_Release(decoder);
+    if (stream)
+        IWICStream_Release(stream);
+    if (factory)
+        IWICImagingFactory_Release(factory);
+
+    return hr;
 }
 
 HRESULT WINAPI D3DX11SaveTextureToFileW(ID3D11DeviceContext *context, ID3D11Resource *texture,
